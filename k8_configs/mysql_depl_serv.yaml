apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cm9vdA==  # root
  mysql-database: cHJvZHVjdF9jYXRlZ29yeQ==  # product_category
  mysql-replication-password: cmVwbGljYXRpb24=  # replication
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  primary.cnf: |
    [mysqld]
    server-id = 1
    report_host = mysql-0.mysql-headless
    log_bin = mysql-bin
    binlog_format = ROW
    binlog_row_image = FULL
    binlog_expire_logs_seconds = 86400
    max_binlog_size = 100M
    default_authentication_plugin = mysql_native_password
    binlog_transaction_dependency_tracking = WRITESET
    enforce_gtid_consistency = ON
    gtid_mode = ON

  secondary.cnf: |
    [mysqld]
    server-id = 2
    report_host = mysql-1.mysql-headless
    log_bin = mysql-bin
    binlog_format = ROW
    binlog_row_image = FULL
    read_only = 1
    default_authentication_plugin = mysql_native_password
    binlog_transaction_dependency_tracking = WRITESET
    enforce_gtid_consistency = ON
    gtid_mode = ON
    
  tertiary.cnf: |   
    [mysqld]
    server-id = 3
    report_host = mysql-2.mysql-headless
    log_bin = mysql-bin
    binlog_format = ROW
    binlog_row_image = FULL
    read_only = 1
    default_authentication_plugin = mysql_native_password
    binlog_transaction_dependency_tracking = WRITESET
    enforce_gtid_consistency = ON
    gtid_mode = ON

  init-secondary.sh: |
    #!/bin/bash
    
    echo "Waiting for primary to be ready..."
    until mysql -h mysql-0.mysql-headless -u root -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do
      sleep 5
    done
    
    echo "Setting up replication from primary..."
    
    # Get binary log file and position from primary
    MASTER_STATUS=$(mysql -h mysql-0.mysql-headless -u root -p${MYSQL_ROOT_PASSWORD} -e "SHOW MASTER STATUS\G")
    BINLOG_FILE=$(echo "$MASTER_STATUS" | grep File | awk '{print $2}')
    BINLOG_POS=$(echo "$MASTER_STATUS" | grep Position | awk '{print $2}')
    
    # Set up replication
    mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "CHANGE MASTER TO MASTER_HOST='mysql-0.mysql-headless', MASTER_USER='replication', MASTER_PASSWORD='${MYSQL_REPLICATION_PASSWORD}', MASTER_LOG_FILE='$BINLOG_FILE', MASTER_LOG_POS=$BINLOG_POS;"
    mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "START SLAVE;"
    
    echo "Replication set up successfully."
  
  # MySQL Router 설정을 위한 스크립트 추가
  bootstrap-router.sh: |   
    #!/bin/bash
    
    echo "Waiting for MySQL cluster members to be ready..."
    until mysql -h mysql-0.mysql-headless -u root -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do
      sleep 5
    done
    
    echo "Bootstrapping MySQL Router..."
    mysqlrouter --bootstrap mysql-0.mysql-headless:3306 --user=root --password=${MYSQL_ROOT_PASSWORD} --force
    
    echo "Starting MySQL Router..."
    mysqlrouter --config=/tmp/mysqlrouter/mysqlrouter.conf
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql-headless
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        # image: mysql:8.0.8.0.29
        image: doohwancho/mysql-custom:8.0.29
        command:
        - bash
        - "-c"
        - |
          set -ex
          # MySQL 설정 파일 복사
          if [[ $HOSTNAME =~ -([0-9]+)$ ]]; then
            ordinal=${BASH_REMATCH[1]}
            if [[ $ordinal -eq 0 ]]; then
              cp /mnt/config-map/primary.cnf /etc/mysql/conf.d/
            elif [[ $ordinal -eq 1 ]]; then  
              cp /mnt/config-map/secondary.cnf /etc/mysql/conf.d/
            else
              cp /mnt/config-map/tertiary.cnf /etc/mysql/conf.d/  
            fi
          else
            echo "Failed to parse hostname: $HOSTNAME"
            exit 1
          fi
        volumeMounts:
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        # image: mysql:8.0.8.0.29
        image: doohwancho/mysql-custom:8.0.29
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Secondary (replica) 초기화
          if [[ $HOSTNAME =~ -([0-9]+)$ ]]; then
            ordinal=${BASH_REMATCH[1]}
            if [[ $ordinal -gt 0 ]]; then
              # Secondary는 Primary(mysql-0)에서 초기 데이터 복제
              if [[ ! -d /var/lib/mysql/mysql ]]; then
                # 복제 사용자 생성(mysql-0에서)
                /mnt/config-map/init-secondary.sh &
              fi
            fi
          fi
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-replication-password
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: config-map
          mountPath: /mnt/config-map
      containers:
      - name: mysql
        # image: mysql:8.0.29
        image: doohwancho/mysql-custom:8.0.29
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-replication-password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # command: ["mysql", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1"]
            command: ["sh", "-c", "mysql -u root -proot -e 'SELECT 1'"]
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: config-map
        configMap:
          name: mysql-config
          defaultMode: 0755
      - name: conf
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1   
kind: Deployment
metadata:
  name: mysql-router
  labels:
    app: mysql-router
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mysql-router
  template:
    metadata:
      labels:
        app: mysql-router
    spec:
      containers:
      - name: mysql-router
        image: mysql/mysql-router:8.0.29
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        ports:
        - containerPort: 6446
        - containerPort: 6447
        command:
        - /bin/bash
        - "-c"
        - |
          echo "Waiting for MySQL cluster..."
          until mysql -h mysql-0.mysql-headless -u root -proot -e "SELECT 1" > /dev/null 2>&1; do
            echo "Waiting for MySQL to be available..."
            sleep 5
          done
          
          echo "Bootstrapping MySQL Router..."
          mysqlrouter --bootstrap mysql-0.mysql-headless:3306 --user=root --password=root --directory=/tmp/mysqlrouter --force
          
          echo "Starting MySQL Router..."
          mysqlrouter --config=/tmp/mysqlrouter/mysqlrouter.conf
        livenessProbe:
          tcpSocket:
            port: 6446
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6446
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            memory: "256Mi"
            cpu: "200m"
          requests:
            memory: "128Mi"
            cpu: "100m"
---
# MySQL Router 서비스 추가
apiVersion: v1   
kind: Service
metadata:
  name: mysql-router
spec:
  selector:
    app: mysql-router
  ports:
  - name: read-write
    port: 6446
    targetPort: 6446
  - name: read-only
    port: 6447
    targetPort: 6447
---
# Headless service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
---
# Primary 서비스 (읽기/쓰기)
apiVersion: v1
kind: Service
metadata:
  name: mysql-primary
spec:
  selector:
    statefulset.kubernetes.io/pod-name: mysql-0
  ports:
  - port: 3306
    targetPort: 3306
---
# Secondary 서비스 (읽기 전용)
apiVersion: v1
kind: Service
metadata:
  name: mysql-secondary
spec:
  selector:
    statefulset.kubernetes.io/pod-name: mysql-1
  ports:
  - port: 3306
    targetPort: 3306
---
# Tertiary 서비스 (읽기 전용) - 새로 추가
apiVersion: v1
kind: Service
metadata:
  name: mysql-tertiary
spec:
  selector:
    statefulset.kubernetes.io/pod-name: mysql-2
  ports:
  - port: 3306
    targetPort: 3306
---
# 기존 서비스 유지 (마이그레이션 호환성)
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    statefulset.kubernetes.io/pod-name: mysql-0
  ports:
  - port: 3306
    targetPort: 3306